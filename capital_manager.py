"""
üí∞ Capital-Based Portfolio Manager v4.0
capital_manager.py

üöÄ NEW FEATURES:
‚úÖ Capital Zone Allocation (Safe/Growth/Aggressive) 
‚úÖ Drawdown-based Protection (30% max)
‚úÖ Progressive Risk Scaling
‚úÖ Recovery Mode Logic
‚úÖ Dynamic Capital Tracking
‚úÖ Live Capital Dashboard Integration

üéØ ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏∏‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏ï‡∏Å + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import json

class CapitalManager:
    """
    üí∞ Capital-Based Portfolio Manager
    
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö Zone-based + Drawdown Protection
    ‡∏õ‡∏£‡∏±‡∏ö lot size ‡πÅ‡∏•‡∏∞ risk ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏ô
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Capital Manager
        
        Args:
            mt5_connector: MT5 connection object
            config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # Capital configuration
        self.capital_config = config.get("capital_management", {})
        
        # Capital zones (% allocation)
        self.safe_zone_percent = self.capital_config.get("safe_zone_percent", 50.0)      # 50%
        self.growth_zone_percent = self.capital_config.get("growth_zone_percent", 35.0)  # 35% 
        self.aggressive_zone_percent = self.capital_config.get("aggressive_zone_percent", 15.0)  # 15%
        
        # Drawdown protection
        self.max_drawdown_percent = self.capital_config.get("max_drawdown_percent", 30.0)  # 30%
        self.conservative_trigger = self.capital_config.get("conservative_trigger", 20.0)  # 20%
        self.emergency_trigger = self.capital_config.get("emergency_trigger", 25.0)       # 25%
        
        # Capital tracking
        self.initial_capital = self.capital_config.get("initial_capital", 5000.0)  # $5K default
        self.current_capital = self.initial_capital
        self.peak_capital = self.initial_capital
        self.current_drawdown = 0.0
        
        # Trading modes
        self.current_mode = "normal"  # normal, conservative, emergency, recovery
        self.recovery_boost_enabled = self.capital_config.get("recovery_boost_enabled", True)
        self.progressive_scaling = self.capital_config.get("progressive_scaling", True)
        
        # Capital zones (dollar amounts)
        self.safe_zone_capital = 0.0
        self.growth_zone_capital = 0.0 
        self.aggressive_zone_capital = 0.0
        
        # Performance tracking
        self.capital_history = []
        self.mode_changes = []
        self.last_update = datetime.now()
        
        print(f"üí∞ Capital Manager initialized")
        print(f"   Initial Capital: ${self.initial_capital:,.2f}")
        print(f"   Zone Allocation: Safe {self.safe_zone_percent}% | Growth {self.growth_zone_percent}% | Aggressive {self.aggressive_zone_percent}%")
        print(f"   Max Drawdown: {self.max_drawdown_percent}%")
        
        self._update_capital_zones()

    # ==========================================
    # üéØ CORE CAPITAL MANAGEMENT
    # ==========================================
    
    def update_capital_status(self) -> Dict:
        """
        üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡∏ô
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å MT5
            account_info = self.mt5_connector.get_account_info()
            if not account_info:
                return self._get_offline_capital_status()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó current capital
            self.current_capital = account_info.get('equity', self.initial_capital)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì drawdown
            if self.current_capital > self.peak_capital:
                self.peak_capital = self.current_capital
            
            self.current_drawdown = ((self.peak_capital - self.current_capital) / self.peak_capital) * 100
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó capital zones
            self._update_capital_zones()
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î trading mode
            self._determine_trading_mode()
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self._record_capital_history()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á status report
            status = {
                'current_capital': self.current_capital,
                'initial_capital': self.initial_capital,
                'peak_capital': self.peak_capital,
                'current_drawdown': self.current_drawdown,
                'trading_mode': self.current_mode,
                'capital_zones': {
                    'safe_zone': self.safe_zone_capital,
                    'growth_zone': self.growth_zone_capital,
                    'aggressive_zone': self.aggressive_zone_capital
                },
                'protection_status': self._get_protection_status(),
                'recommendations': self._generate_recommendations()
            }
            
            self.last_update = datetime.now()
            return status
            
        except Exception as e:
            print(f"‚ùå Capital status update error: {e}")
            return self._get_offline_capital_status()

    def _update_capital_zones(self):
        """üéØ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Capital Zones ‡∏ï‡∏≤‡∏°‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            self.safe_zone_capital = self.current_capital * (self.safe_zone_percent / 100)
            self.growth_zone_capital = self.current_capital * (self.growth_zone_percent / 100)
            self.aggressive_zone_capital = self.current_capital * (self.aggressive_zone_percent / 100)
            
        except Exception as e:
            print(f"‚ùå Capital zones update error: {e}")

    def _determine_trading_mode(self):
        """üé® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Trading Mode ‡∏ï‡∏≤‡∏° Drawdown"""
        try:
            old_mode = self.current_mode
            
            if self.current_drawdown >= self.emergency_trigger:
                self.current_mode = "emergency"
            elif self.current_drawdown >= self.conservative_trigger:
                self.current_mode = "conservative"
            elif self.current_drawdown < 5.0 and self.current_capital > self.peak_capital * 0.95:
                self.current_mode = "recovery" if old_mode in ["conservative", "emergency"] else "normal"
            else:
                self.current_mode = "normal"
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mode
            if old_mode != self.current_mode:
                self.mode_changes.append({
                    'timestamp': datetime.now(),
                    'from_mode': old_mode,
                    'to_mode': self.current_mode,
                    'drawdown': self.current_drawdown,
                    'capital': self.current_capital
                })
                
                print(f"üé® Trading mode changed: {old_mode} ‚Üí {self.current_mode} (DD: {self.current_drawdown:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå Trading mode determination error: {e}")

    # ==========================================
    # üéØ LOT SIZE & RISK CALCULATION
    # ==========================================
    
    def calculate_position_size(self, zone: str, signal_strength: float, order_role: str = "PW") -> float:
        """
        üìè ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Position Size ‡∏ï‡∏≤‡∏° Zone + Role
        
        Args:
            zone: "safe", "growth", ‡∏´‡∏£‡∏∑‡∏≠ "aggressive"
            signal_strength: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (0.0-1.0)
            order_role: ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (HG/PW/RH/SC)
            
        Returns:
            float: ‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        """
        try:
            # Base lot ‡∏ï‡∏≤‡∏° zone
            if zone == "safe":
                base_lot = 0.01
                max_lot = 0.05
                zone_capital = self.safe_zone_capital
            elif zone == "growth": 
                base_lot = 0.02
                max_lot = 0.10
                zone_capital = self.growth_zone_capital
            elif zone == "aggressive":
                base_lot = 0.03
                max_lot = 0.20
                zone_capital = self.aggressive_zone_capital
            else:
                base_lot = 0.01
                max_lot = 0.05
                zone_capital = self.safe_zone_capital
            
            # Role multiplier
            role_multipliers = {
                "HG": 0.8,   # Hedge Guard - conservative
                "PW": 1.0,   # Profit Walker - normal
                "RH": 1.5,   # Recovery Hunter - aggressive  
                "SC": 1.2    # Scalp Capture - slightly higher
            }
            role_multiplier = role_multipliers.get(order_role, 1.0)
            
            # Signal strength multiplier
            signal_multiplier = 0.5 + (signal_strength * 1.5)  # 0.5 - 2.0 range
            
            # Trading mode multiplier
            mode_multipliers = {
                "normal": 1.0,
                "conservative": 0.6,
                "emergency": 0.3,
                "recovery": 1.4
            }
            mode_multiplier = mode_multipliers.get(self.current_mode, 1.0)
            
            # Capital efficiency multiplier
            capital_efficiency = min(2.0, self.current_capital / self.initial_capital)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì final lot
            calculated_lot = base_lot * signal_multiplier * role_multiplier * mode_multiplier * capital_efficiency
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
            final_lot = max(0.01, min(max_lot, calculated_lot))
            
            print(f"üìè Lot calculation: {zone} zone, {order_role} role")
            print(f"   Base: {base_lot} ‚Üí Signal: {signal_multiplier:.2f} ‚Üí Role: {role_multiplier} ‚Üí Mode: {mode_multiplier} ‚Üí Final: {final_lot:.2f}")
            
            return round(final_lot, 2)
            
        except Exception as e:
            print(f"‚ùå Position size calculation error: {e}")
            return 0.01

    def get_risk_allocation_for_zone(self, zone: str) -> Dict:
        """
        üéØ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Risk Allocation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Zone
        
        Args:
            zone: "safe", "growth", ‡∏´‡∏£‡∏∑‡∏≠ "aggressive"
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• risk allocation
        """
        try:
            if zone == "safe":
                return {
                    'max_risk_per_trade': 0.5,      # 0.5% ‡∏ï‡πà‡∏≠ trade
                    'max_total_risk': 5.0,          # 5% ‡∏Ç‡∏≠‡∏á zone
                    'max_positions': 15,            # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15 positions
                    'preferred_roles': ['HG', 'PW'] # ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                }
            elif zone == "growth":
                return {
                    'max_risk_per_trade': 1.0,      # 1% ‡∏ï‡πà‡∏≠ trade
                    'max_total_risk': 10.0,         # 10% ‡∏Ç‡∏≠‡∏á zone  
                    'max_positions': 25,            # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 25 positions
                    'preferred_roles': ['PW', 'SC'] # ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                }
            elif zone == "aggressive":
                return {
                    'max_risk_per_trade': 2.0,      # 2% ‡∏ï‡πà‡∏≠ trade
                    'max_total_risk': 15.0,         # 15% ‡∏Ç‡∏≠‡∏á zone
                    'max_positions': 10,            # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 positions  
                    'preferred_roles': ['RH', 'SC'] # ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                }
            else:
                # Default safe allocation
                return {
                    'max_risk_per_trade': 0.5,
                    'max_total_risk': 5.0,
                    'max_positions': 15,
                    'preferred_roles': ['HG', 'PW']
                }
                
        except Exception as e:
            print(f"‚ùå Risk allocation error: {e}")
            return {'max_risk_per_trade': 0.5, 'max_total_risk': 5.0, 'max_positions': 15, 'preferred_roles': ['HG']}

    # ==========================================
    # üõ°Ô∏è PROTECTION & EMERGENCY MANAGEMENT
    # ==========================================
    
    def _get_protection_status(self) -> Dict:
        """üõ°Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"""
        try:
            return {
                'drawdown_level': 'normal' if self.current_drawdown < 10 else 
                                'warning' if self.current_drawdown < 20 else
                                'critical' if self.current_drawdown < 25 else 'emergency',
                'protection_active': self.current_mode in ['conservative', 'emergency'],
                'recovery_mode': self.current_mode == 'recovery',
                'capital_efficiency': self.current_capital / self.initial_capital,
                'days_since_peak': (datetime.now() - self.last_update).days if hasattr(self, 'last_update') else 0
            }
            
        except Exception as e:
            return {'drawdown_level': 'unknown', 'protection_active': False}

    def _generate_recommendations(self) -> List[str]:
        """üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå"""
        try:
            recommendations = []
            
            if self.current_mode == "emergency":
                recommendations.extend([
                    f"üö® Emergency Mode: Drawdown {self.current_drawdown:.1f}%",
                    "‚ö†Ô∏è ‡∏•‡∏î position size ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á",
                    "üõ°Ô∏è ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ risk ‡∏™‡∏π‡∏á",
                    "üí∞ ‡πÄ‡∏ô‡πâ‡∏ô Safe Zone trading ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                ])
                
            elif self.current_mode == "conservative":
                recommendations.extend([
                    f"‚ö†Ô∏è Conservative Mode: Drawdown {self.current_drawdown:.1f}%", 
                    "üìâ ‡∏•‡∏î lot size ‡∏•‡∏á 40%",
                    "üéØ ‡πÄ‡∏ô‡πâ‡∏ô high-probability setups ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    "‚öñÔ∏è ‡∏´‡∏≤ hedge opportunities"
                ])
                
            elif self.current_mode == "recovery":
                recommendations.extend([
                    "üöÄ Recovery Mode: Performance ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß",
                    "üìà ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° position size ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", 
                    "üéØ ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Growth Zone entries",
                    "üí° ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ RH (Recovery Hunter) positions"
                ])
                
            else:  # normal mode
                recommendations.extend([
                    "‚úÖ Normal Mode: Portfolio ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ",
                    f"üí∞ Capital: ${self.current_capital:,.2f} (DD: {self.current_drawdown:.1f}%)",
                    "üéØ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ",
                    "üìä ‡∏ó‡∏∏‡∏Å zones ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                ])
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏° capital efficiency
            efficiency = self.current_capital / self.initial_capital
            if efficiency > 1.2:
                recommendations.append("üåü Capital ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 20%+ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡∏¢‡∏≤‡∏¢ position sizes")
            elif efficiency < 0.8:
                recommendations.append("üìâ Capital ‡∏•‡∏î‡∏•‡∏á 20%+ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")
            
            return recommendations
            
        except Exception as e:
            return [f"‚ùå Recommendation generation error: {e}"]

    # ==========================================
    # üìä REPORTING & ANALYTICS
    # ==========================================
    
    def get_capital_dashboard_data(self) -> Dict:
        """üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Capital Dashboard"""
        try:
            return {
                'capital_overview': {
                    'current': self.current_capital,
                    'initial': self.initial_capital,
                    'peak': self.peak_capital,
                    'change_percent': ((self.current_capital - self.initial_capital) / self.initial_capital) * 100,
                    'drawdown_percent': self.current_drawdown
                },
                'zone_allocation': {
                    'safe': {'amount': self.safe_zone_capital, 'percent': self.safe_zone_percent},
                    'growth': {'amount': self.growth_zone_capital, 'percent': self.growth_zone_percent}, 
                    'aggressive': {'amount': self.aggressive_zone_capital, 'percent': self.aggressive_zone_percent}
                },
                'trading_mode': {
                    'current': self.current_mode,
                    'protection_level': self._get_protection_status()['drawdown_level'],
                    'mode_changes_today': len([m for m in self.mode_changes if m['timestamp'].date() == datetime.now().date()])
                },
                'performance_metrics': {
                    'total_return_percent': ((self.current_capital - self.initial_capital) / self.initial_capital) * 100,
                    'max_drawdown_percent': max([h.get('drawdown', 0) for h in self.capital_history] + [0]),
                    'capital_efficiency': self.current_capital / self.initial_capital,
                    'days_active': (datetime.now() - self.capital_history[0]['timestamp']).days if self.capital_history else 0
                }
            }
            
        except Exception as e:
            print(f"‚ùå Dashboard data error: {e}")
            return {'error': str(e)}

    def _record_capital_history(self):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ capital"""
        try:
            if not hasattr(self, 'capital_history'):
                self.capital_history = []
            
            self.capital_history.append({
                'timestamp': datetime.now(),
                'capital': self.current_capital,
                'drawdown': self.current_drawdown,
                'mode': self.current_mode,
                'peak': self.peak_capital
            })
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 1000 records ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.capital_history) > 1000:
                self.capital_history = self.capital_history[-500:]
                
        except Exception as e:
            print(f"‚ùå Capital history recording error: {e}")

    def _get_offline_capital_status(self) -> Dict:
        """üì± ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ offline ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        return {
            'current_capital': self.current_capital,
            'initial_capital': self.initial_capital,
            'peak_capital': self.peak_capital,
            'current_drawdown': self.current_drawdown,
            'trading_mode': 'offline',
            'capital_zones': {
                'safe_zone': self.safe_zone_capital,
                'growth_zone': self.growth_zone_capital,
                'aggressive_zone': self.aggressive_zone_capital
            },
            'protection_status': {'drawdown_level': 'offline', 'protection_active': True},
            'recommendations': ['üì± ‡∏£‡∏∞‡∏ö‡∏ö offline - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5']
        }

# ==========================================
# üîß INTEGRATION HELPER FUNCTIONS
# ==========================================

def integrate_capital_manager_with_system(capital_manager, signal_generator, lot_calculator, position_monitor, risk_manager):
    """
    üîó ‡∏ú‡∏π‡∏Å Capital Manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    
    Args:
        capital_manager: CapitalManager instance
        signal_generator: SignalGenerator instance  
        lot_calculator: LotCalculator instance
        position_monitor: PositionMonitor instance
        risk_manager: RiskManager instance
    """
    try:
        print("üîó Integrating Capital Manager with system components...")
        
        # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Signal Generator
        if hasattr(signal_generator, 'set_capital_manager'):
            signal_generator.set_capital_manager(capital_manager)
            
        # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Lot Calculator  
        if hasattr(lot_calculator, 'set_capital_manager'):
            lot_calculator.set_capital_manager(capital_manager)
            
        # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Position Monitor
        if hasattr(position_monitor, 'set_capital_manager'):
            position_monitor.set_capital_manager(capital_manager)
            
        # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Risk Manager
        if hasattr(risk_manager, 'set_capital_manager'):
            risk_manager.set_capital_manager(capital_manager)
            
        print("‚úÖ Capital Manager integration completed")
        
    except Exception as e:
        print(f"‚ùå Capital Manager integration error: {e}")

def create_capital_manager(mt5_connector, config: Dict) -> CapitalManager:
    """
    üè≠ Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á CapitalManager
    
    Args:
        mt5_connector: MT5 connector instance
        config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        
    Returns:
        CapitalManager: configured instance
    """
    try:
        capital_manager = CapitalManager(mt5_connector, config)
        capital_manager.update_capital_status()  # Update ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        
        print("üè≠ Capital Manager created and initialized")
        return capital_manager
        
    except Exception as e:
        print(f"‚ùå Capital Manager creation error: {e}")
        return None